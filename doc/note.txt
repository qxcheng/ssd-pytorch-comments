1. 改动
coco.py --> COCO_ROOT
config.py --> HOME

layers/modules/multibox_loss.py  line97 loss
train.py line183 loss
eval.py  line425 cuda
test.py  line89  cuda

2.SSD网络结构
输入：1x3x300x300

base_
[Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)),
 ReLU(inplace),
 Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)),
 ReLU(inplace),
 MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False),

 Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)),
 ReLU(inplace),
 Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)),
 ReLU(inplace),
 MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False),

 Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)),
 ReLU(inplace),
 Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)),
 ReLU(inplace),
 Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)),
 ReLU(inplace),
 MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=True),

 Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)),
 ReLU(inplace),
 Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)),
 ReLU(inplace),
 Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)),
 ReLU(inplace),
 MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False),

 Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)),
 ReLU(inplace),
 Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)),
 ReLU(inplace),
 Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)),
 ReLU(inplace),
 MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False),

 Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(6, 6), dilation=(6, 6)),
 ReLU(inplace),
 Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1)),
 ReLU(inplace)]

extras_
[Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1)),
 Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)),
 Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1)),
 Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)),
 Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1)),
 Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1)),
 Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1)),
 Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1))]


head_
([Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)),
  Conv2d(1024, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)),
  Conv2d(512, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)),
  Conv2d(256, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)),
  Conv2d(256, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)),
  Conv2d(256, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))],
 [Conv2d(512, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)),
  Conv2d(1024, 126, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)),
  Conv2d(512, 126, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)),
  Conv2d(256, 126, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)),
  Conv2d(256, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)),
  Conv2d(256, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))])
